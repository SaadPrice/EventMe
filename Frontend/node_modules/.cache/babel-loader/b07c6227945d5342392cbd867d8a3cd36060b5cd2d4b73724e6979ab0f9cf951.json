{"ast":null,"code":"const dotenv = require('dotenv');\nconst express = require('express');\nconst cors = require('cors');\nconst http = require('http');\nconst path = require('path');\nconst sequelize = require('./config/database');\nconst authRoutes = require('./routes/authRoutes');\nconst eventRoutes = require('./routes/eventRoutes');\ndotenv.config();\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/events', eventRoutes);\n\n// Serve static files from the React frontend app\napp.use(express.static(path.join(__dirname, 'frontend/build')));\n\n// Anything that doesn't match the above routes, send back index.html\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname + '/frontend/build/index.html'));\n});\n\n// Database connection\nsequelize.sync().then(() => console.log('Database connected')).catch(err => console.error('Database connection error:', err));\n\n// Create HTTP server\nconst server = http.createServer(app);\n\n// Start the server\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["dotenv","require","express","cors","http","path","sequelize","authRoutes","eventRoutes","config","app","use","json","static","join","__dirname","get","req","res","sendFile","sync","then","console","log","catch","err","error","server","createServer","PORT","process","env","listen"],"sources":["C:/Assignments/EventMe/Frontend/src/App.js"],"sourcesContent":["const dotenv = require('dotenv');\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst http = require('http');\r\nconst path = require('path');\r\nconst sequelize = require('./config/database');\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst eventRoutes = require('./routes/eventRoutes');\r\n\r\ndotenv.config();\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// API Routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/events', eventRoutes);\r\n\r\n// Serve static files from the React frontend app\r\napp.use(express.static(path.join(__dirname, 'frontend/build')));\r\n\r\n// Anything that doesn't match the above routes, send back index.html\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname + '/frontend/build/index.html'));\r\n});\r\n\r\n// Database connection\r\nsequelize.sync()\r\n  .then(() => console.log('Database connected'))\r\n  .catch((err) => console.error('Database connection error:', err));\r\n\r\n// Create HTTP server\r\nconst server = http.createServer(app);\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 3000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,SAAS,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMM,UAAU,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMO,WAAW,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AAEnDD,MAAM,CAACS,MAAM,CAAC,CAAC;AACf,MAAMC,GAAG,GAAGR,OAAO,CAAC,CAAC;;AAErB;AACAQ,GAAG,CAACC,GAAG,CAACR,IAAI,CAAC,CAAC,CAAC;AACfO,GAAG,CAACC,GAAG,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAF,GAAG,CAACC,GAAG,CAAC,WAAW,EAAEJ,UAAU,CAAC;AAChCG,GAAG,CAACC,GAAG,CAAC,aAAa,EAAEH,WAAW,CAAC;;AAEnC;AACAE,GAAG,CAACC,GAAG,CAACT,OAAO,CAACW,MAAM,CAACR,IAAI,CAACS,IAAI,CAACC,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAC;;AAE/D;AACAL,GAAG,CAACM,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACC,QAAQ,CAACd,IAAI,CAACS,IAAI,CAACC,SAAS,GAAG,4BAA4B,CAAC,CAAC;AACnE,CAAC,CAAC;;AAEF;AACAT,SAAS,CAACc,IAAI,CAAC,CAAC,CACbC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC,CAAC;;AAEnE;AACA,MAAME,MAAM,GAAGvB,IAAI,CAACwB,YAAY,CAAClB,GAAG,CAAC;;AAErC;AACA,MAAMmB,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCF,MAAM,CAACK,MAAM,CAACH,IAAI,EAAE,MAAM;EACxBP,OAAO,CAACC,GAAG,CAAC,yCAAyCM,IAAI,EAAE,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}